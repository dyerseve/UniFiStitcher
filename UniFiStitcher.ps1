<#Set-ExecutionPolicy Unrestricted
# UniFi 10 minute video stitcher (requires FFMpeg)
#$Exclude = "Vesi Inc", 
#$Prompt = "Impact Fleet"
#>

<# Variables #>
$cleanup = $True  #Determines if you remove source files when the work is done.
$ofile = "C:\scripts\VideoOutput.mp4" #destination file
$ipath = "C:\UniFiStitchWorkspace" #input file location, a scratch space if you will
$ffmpegcmd = "C:\Programs\ffmpeg\bin\ffmpeg.exe" #ffmpeg exe location
$stitchfilelist = "$ipath\stitchlist.txt" #the list to feed ffmpeg (it will be generated by the script)
$ffmpegArgs = @('-f', 'concat', '-safe', '0', '-i', $stitchfilelist, '-y', '-c', 'copy', $ofile) #parameters for ffmpeg no need to change these for UniFi video tasks

#Functions
##Pause Function
Function Pause($M="Press any key to continue . . . "){If($psISE){$S=New-Object -ComObject "WScript.Shell";$B=$S.Popup("Click OK to continue.",0,"Script Paused",0);Return};Write-Host -NoNewline $M;$I=16,17,18,20,91,92,93,144,145,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183;While($K.VirtualKeyCode -Eq $Null -Or $I -Contains $K.VirtualKeyCode){$K=$Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")};Write-Host}

## File Dialog Prompt (title doesn't seem to work)
Function Get-FileName($initialDirectory, $diagTitle)
{
    [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null
    
    $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $OpenFileDialog.initialDirectory = $initialDirectory
    $OpenFileDialog.ShowDialog() | Out-Null
    $OpenFileDialog.filename
	$OpenFileDialog.Title = $diagTitle
}

#Debugging
$DebugPreference = "Continue"

#Logging feature
$ErrorActionPreference="SilentlyContinue"
Stop-Transcript | out-null
$ErrorActionPreference = "Continue"
#current script directory
$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition
#current script name
$path = Get-Location
$scriptName = $MyInvocation.MyCommand.Name
$scriptLog = "$scriptPath\log\$scriptName.log"
#start a transcript file
Start-Transcript -path $scriptLog
#Code Begin
try
{
	remove-item -path $stitchfilelist -Force
}
Catch
{
	$ErrorMessage = $_.Exception.Message
	$FailedItem = $_.Exception.ItemName
	Write-Debug "Error $ErrorMessage occurred on Item $FailedItem"
	Stop-Transcript
	#Send-MailMessage -To "$alertEmail" -From "Customer Backup <backups@fullercomputer.com>" -Subject "Clone Failed" -Body "Clone Failed" -UseSSL -Attachments $scriptLog -smtpserver fullercomputer-com.mail.eo.outlook.com
	Break
}

If ($zipfile = Get-ChildItem $ipath\*.zip) {
	Expand-Archive -Path $zipfile -DestinationPath $ipath -Force
}
foreach ($i in Get-ChildItem $ipath\*.mp4) {echo "file '$i'" | out-file -append -encoding ASCII $stitchfilelist}
& $ffmpegcmd $ffmpegArgs

If ($cleanup) {
	try
	{
		Get-ChildItem -Path $ipath\*.mp4 | Remove-Item
	}
	Catch
	{
		$ErrorMessage = $_.Exception.Message
		$FailedItem = $_.Exception.ItemName
		Write-Debug "Error $ErrorMessage occurred on Item $FailedItem"
		Stop-Transcript
		#Send-MailMessage -To "$alertEmail" -From "Customer Backup <backups@fullercomputer.com>" -Subject "Clone Failed" -Body "Clone Failed" -UseSSL -Attachments $scriptLog -smtpserver fullercomputer-com.mail.eo.outlook.com
		Break
	}
	try
	{
		Get-ChildItem -Path $ipath\*.zip | Remove-Item
	}
	Catch
	{
		$ErrorMessage = $_.Exception.Message
		$FailedItem = $_.Exception.ItemName
		Write-Debug "Error $ErrorMessage occurred on Item $FailedItem"
		Stop-Transcript
		#Send-MailMessage -To "$alertEmail" -From "Customer Backup <backups@fullercomputer.com>" -Subject "Clone Failed" -Body "Clone Failed" -UseSSL -Attachments $scriptLog -smtpserver fullercomputer-com.mail.eo.outlook.com
		Break
	}
}
<# Sample Try Catch Debugging

$alertEmail = "Phil Ellis <pellis@fullercomputer.com>"

try
{
	invoke-sqlcmd -ServerInstance "MSJBBTESTDB01" -Query "Drop database BBLEARN;"
}
Catch
{
	$ErrorMessage = $_.Exception.Message
	$FailedItem = $_.Exception.ItemName
	Write-Debug "Error $ErrorMessage occurred on Item $FailedItem"
	Stop-Transcript
	Send-MailMessage -To "$alertEmail" -From "Customer Backup <backups@fullercomputer.com>" -Subject "Clone Failed" -Body "Clone Failed" -UseSSL -Attachments $scriptLog -smtpserver fullercomputer-com.mail.eo.outlook.com
	Break
}
Write-Debug "BBLEARN Database dropped"
#>

<# Office 365 Code Chunk
#saved cred file OR Prompt for credentials (only uncomment one)
$LiveCred = Import-Clixml -Path C:\Users\pellis\pscred.xml
#$LiveCred = Get-Credential
#$LiveCred = $Host.ui.PromptForCredential("","Enter an account to add the machine to the domain","$env:userdomain\$env:username","")

#$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell/ -Credential $LiveCred -Authentication Basic -AllowRedirection
$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://pod51041psh.outlook.com/powershell-liveid?PSVersion=4.0 -Credential $LiveCred -Authentication Basic -AllowRedirection
Import-PSSession $Session
Connect-MsolService -Credential $LiveCred
Write-Debug "Connect complete"
#$tenDomain = Read-Host 'What is the domain you are working with?'
#$tenID=(get-msolpartnercontract -domain $tenDomain).tenantId.guid
#>

<#
$tenID=(get-msolpartnercontract).tenantId.guid
Write-Debug "Array filled"
for ($i=0; $i -lt $tenID.length; $i++) {	
	Write-Debug $i
	Write-Debug $tenID[$i]
	Write-Debug "Company Info"
	Get-MsolCompanyInformation -tenantId $tenID[$i]
	#Add User Account
	$defaultDom = Get-MSolDomain -tenantid $tenid[$i] | Where-object {$_.IsDefault -eq "True"} | Select Name
	Write-Debug $defaultDom.Name
	$newemail = "fitadmin@" + $defaultDom.Name
	Write-Debug $newemail
	Get-MsolUser -TenantID $tenid[$i] | ? { $_.UserPrincipalName -eq $newemail }
	If (@(Get-MsolUser -TenantID $tenid[$i] | ? { $_.UserPrincipalName -eq $newemail }).Count -eq 0) {
		Write-Debug " doesn't exist"
		$member = New-MsolUser -DisplayName "FCS FIT Admin" -MobilePhone "+1 5136419312" -UserPrincipalName $newemail -alternateemailaddresses fitadmin-altemail@fullercomputer.com -Password !FCSis4u2! -TenantID $tenid[$i] -ForceChangePassword $false -PasswordNeverExpires $true
		Add-MsolRoleMember -RoleName "Company Administrator" -RoleMemberEmailAddress $newemail -TenantID $tenid[$i]
	} Else {
		Write-Debug " already exists"
		Set-MsolUserPassword -UserPrincipalName $newemail -NewPassword !FCSis4u2! -ForceChangePassword $False -TenantID $tenid[$i]
	}
	#Break
}
#>

########Always place these EOF########
#Close all open sessions
try
{
	Remove-PSSession $Session
}
catch
{
   #Just suppressing Error Dialogs
}

Get-PSSession | Remove-PSSession
#Close Transcript log
Stop-Transcript